
from Crypto.PublicKey import RSA
import Crypto
import ast
def egcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, y, x = egcd(b % a, a)
        return (g, x - (b // a) * y, y)

def modinv(a, m):
    g, x, y = egcd(a, m)
    if g != 1:
        raise Exception('modular inverse does not exist')
    else:
        return x % m

p= 141835939825390252764096251296889926668359910135028926302756081969382419306828550195963181625639680831323573550644713989824522733217099494058212794014637460446899839894488102299115774948210939925643653783376724832757021374866478685754322271634575306573376980239709772996679131763521035516371654212107560201638129391999477382014454151280719516727794975492514523194687537884392035206814586388435115823835217334406707311356421125493841840637466774217176883392644241
q= 1870909817348574776843586968705575114122498232680700397694236637759726958886012397346968952881705202945812512066060207771214302638382713349288318538891293144922908739243622342570799947463308017416435216548077562362397005552780647478757185683356370358867724766107833383762231460053992020096152475647982945152834135468787268341000829539390053923786764696648299458963323368450414262722979462961878236773156864761787972455259056294622868929026130468606169539843611377
phi=(p-1)*(q-1)
n=p*q
e1 = 65537
e2 = 65539
c=132418702425423073777085414800616440851535605554110679041014893035593675222764834357724596581012865280814579400767602917331925832544139943910999173666888844952947870049991682935538005620100971916073085156006744133364487417840007890542301352266293555639856605159828299284347310328154234485888907341486140144875294487133327631013383856272953788091044870731583376141716240291500444463958579574252585864164612416191869770027201819017807319828396312230012806801506524552647649696466938384037363569606482426791535756831431388213705269794369882745933595172968385071487858655147464573490694879453007560373020039109688711352030500218835536008867703664438950156090934547603581054087059451378117412112100627395431603438102110658234251718456982044045378911872956802290388568039727764184762915468345768326137660334048400779253736836335694612775315931449114477403331009389597949717181673922794832788452971433825569876412852634359752500824

d=modinv(e1*e2,phi)
print('here is the decryption key:'+str(d))
print('here is the decrypted text: '+str(pow(c,d,n)))
